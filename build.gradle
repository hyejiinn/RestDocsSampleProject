plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'

	id "org.asciidoctor.jvm.convert" version "3.3.2" // Asciidoctor plugin 을 적용해야 함 (AsciiDoc 문법으로 작성하면 Asciidoctor를 이용해서 html로 변환해준다.)
}

group = 'com.sample'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	asciidoctorExt // Asciidoctor 를 확장하는 종속성에 대한 구성을 선언
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'

	// RestDocs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

ext {
	// snippetsDir 생성된 조각(snipppets)의 출력 위치를 정의하는 속성을 구성
	snippetsDir = file('build/generated-snippets')
}

test {
	// test 작업을 실행하면 출력이 snippetsDir에 기록된다는 점을 Gradle이 인식하도록 한다.
	useJUnitPlatform()
	outputs.dir snippetsDir
}

asciidoctor { // asciidoctor 작업을 구성
	inputs.dir snippetsDir // 7. 작업을 실행하면 snippetDir에서 입력을 읽게된다고 Gradle에 인식
	configurations 'asciidoctorExt'

	baseDirFollowsSourceFile()
	dependsOn test //  test 수행한 다음에 asciidoctor를 수행한다.
}

asciidoctor.doFirst { // asciidoctor 작업을 실행하기 전에, 해당 경로의 파일 모두 지우도록 ! (중복 내용 방지)
	delete file("src/main/resources/static/docs")
}

bootJar {
	dependsOn asciidoctor // test -> asciidoctor -> bootJar

//	from("${asciidoctor.outputDir}") {
//		into 'static/docs'
//	}
}

task copyDocument (type: Copy) { // 프로젝트 실행 했을 때 문서에 접근할 수 있도록 복사하는 과정 수행
	dependsOn asciidoctor

	from file(layout.buildDirectory.dir("/docs/asciidoc").get().asFile)
	into file("src/main/resources/static/docs")

}

build {
	String activeProfile = System.properties['spring.profiles.active']

	if(activeProfile != "real") {
		dependsOn copyDocument
	}
}
