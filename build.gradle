plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'

	id "org.asciidoctor.jvm.convert" version "3.3.2" // Asciidoctor plugin 을 적용해야 함 (sciiDoc 문법으로 작성하면 Asciidoctor를 이용해서 html로 변환해준다.)
}

group = 'com.sample'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	asciidoctorExt // Asciidoctor 를 확장하는 종속성에 대한 구성을 선언
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'

	// RestDocs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	// springdoc 으로 하는 방법!! 오 이거 엄청 편리하다.
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}


ext {
	// snippetsDir 생성된 조각(snipppets)의 출력 위치를 정의하는 속성을 구성
	snippetsDir = file('build/generated-snippets')
}

test {
	// test 작업을 실행하면 출력이 snippetsDir에 기록된다는 점을 Gradle이 인식하도록 한다.
	outputs.dir snippetsDir
}

asciidoctor { // asciidoctor 작업을 구성
	inputs.dir snippetsDir // 7. 작업을 실행하면 snippetDir에서 입력을 읽게된다고 Gradle에 인식
	configurations 'asciidoctorExt'
	dependsOn test //  test 수행한 다음에 asciidoctor를 수행한다.
}

bootJar {
	dependsOn asciidoctor // test -> asciidoctor -> bootJar

	String activeProfile = System.properties['spring.profiles.active']
	if(activeProfile != "real") {
		copy {
			from asciidoctor.outputDir
			into 'src/main/resources/static/docs'
		}
	}
}

